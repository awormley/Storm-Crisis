import java.awt.image.BufferedImage;


public abstract class Plant extends Drawable{
	
	private String[] description;
	private int strength;
	private int range;
	private int cost;
	private Grid_Type type;
	private BufferedImage[] idle;
	private BufferedImage[] eat;
	private int instrument; //0,1,2,3 we'll see
	private int size;
	public boolean eating;
	
	public Plant(int x, int y){
		super(x,y);
	}
	
	public void setDesc(String[] desc){
		description = desc;
	}
	public String[] getDesc(){
		return description;
	}
	public int getStrength(){ 
		return strength;
	}
	public int getRange(){
		return range;
	}
	public BufferedImage getIdleImg(){
		return idle[0];  //for now, just display 1st one in array
	}
	public BufferedImage getEatImg(){
		return eat[0];  //for now, just display 1st one in array
	}
	@Override
	public BufferedImage getPicture(){ 
		if (eating){
			return getEatImg();
		}
		else{
			return getIdleImg();
		}
	}
	public int getInstrument(){
		return instrument;
	}
	
	public int getSize(){
		return size;
	}
	public void setSize(int s){
		size = s;
	}
	
	
	//still working on this
	public int absorb(Grid g){
		int loc[] = getLoc();
		if(checkSquare(-1,0,g) || checkSquare(1,0,g) 
				|| checkSquare(0,-1,g) || checkSquare(0,1,g)){ 
			//checks if square nearby plant is water on a path
			
			System.out.println("plant at (" + loc[0] + ", " + loc[1] + ") can remove water nearby");
			return(g.foreground.indexOf(this));
		}
		else 
			return 9999;

	}
	
	//still working on this
	private boolean checkSquare(int dx, int dy, Grid g){
		
		int[] loc = getLoc(); //plant x and y loc
		int[][] grid = g.getIntGrid();
		boolean occupied[][] = g.getOccupiedSquares();
		int maxX = g.getNumTilesX();
		int maxY = g.getNumTilesY();
		
		//check all plants that if nearby grid loc is path and it is occupied (then water)
		if((loc[0] + dx) < maxX && (loc[0] + dx )>= 0 && (loc[1] + dy) < maxY && (loc[1] + dy) >=0){
			if(occupied[loc[0]+dx][loc[1]+dy] == true){
				if(grid[loc[0]+dx][loc[1]+dy] == 3){
					//	its a path and occupied so water must be there
					int locX = loc[0] + dx;
					int locY = loc[1] + dy;
					System.out.println("found water at (" + locX + ", " + locY + ")");
						return true;
				}
			}
		}
		return false;
	}
	
	public void setup(int str, int ran, int cos, BufferedImage[] id, BufferedImage[] ea){
		//System.out.println("Setting up!");
		strength = str;
		range = ran;
		cost = cos;
		idle = id;
		eat = ea;
	}
	
}
