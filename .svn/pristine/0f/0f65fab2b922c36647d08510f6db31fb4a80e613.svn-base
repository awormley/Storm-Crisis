import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.awt.image.BufferedImage;
import java.awt.Color;
import java.awt.Graphics;
import javax.imageio.ImageIO;
public class Water extends Drawable{
	private int size;
	private int direction;
	BufferedImage directionImages[] = new BufferedImage[4];
	public Water(int dir, int x, int y){
		super(x,y);
		setName("Water");
		size = 10; //default size subject to change
		direction = dir; //0 E, 1 S, 2 W, 3 N
		try {
			directionImages[0] = ImageIO.read(new File("img/Images/Placeholders/WaterEnemy/WaterEnemyRight1.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			directionImages[1] = ImageIO.read(new File("img/Images/Placeholders/WaterEnemy/WaterEnemyDown1.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			directionImages[2] = ImageIO.read(new File("img/Images/Placeholders/WaterEnemy/WaterEnemyLeft1.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			directionImages[3] = ImageIO.read(new File("img/Images/Placeholders/WaterEnemy/WaterEnemyUp1.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	@Override
	public void move(Grid g){
		int loc[] = getLoc();
		if(direction == 0){
			if(checkSquare(1,0,g)){ //check square to right
				g.foreground.add(new Water(0,loc[0]+1,loc[1]));
			}
			else if(checkSquare(0,1,g)) //check square below
				g.foreground.add(new Water(1,loc[0],loc[1]+1)); 
			else if(checkSquare(0,-1,g)) //check square above
				g.foreground.add(new Water(3,loc[0],loc[1]-1));
		}
		else if(direction == 1){
			if(checkSquare(0,1,g)) //check square below
				g.foreground.add(new Water(1,loc[0],loc[1]+1));
			else if(checkSquare(-1,0,g)) //check square to left
				g.foreground.add(new Water(2,loc[0]-1,loc[1])); 
			else if(checkSquare(1,0,g)) //check square to right
				g.foreground.add(new Water(0,loc[0]+1,loc[1]));
		}
		else if(direction == 2){
			if(checkSquare(-1,0,g)) //check square to left
				g.foreground.add(new Water(2,loc[0]-1,loc[1]));
			else if(checkSquare(0,1,g)) //check square below
				g.foreground.add(new Water(1,loc[0],loc[1]+1)); 
			else if(checkSquare(0,-1,g)) //check square above
				g.foreground.add(new Water(3,loc[0],loc[1]-1));
		}
		else if(direction == 3){
			if(checkSquare(0,-1,g)) //check square above
				g.foreground.add(new Water(3,loc[0],loc[1]-1));
			else if(checkSquare(-1,0,g)) //check square to left
				g.foreground.add(new Water(2,loc[0]-1,loc[1])); 
			else if(checkSquare(1,0,g)) //check square to right
				g.foreground.add(new Water(0,loc[0]+1,loc[1]));
		}
		
		//g.removeFromForeground(loc[0],loc[1]); //remove itself, this will probably work
		
	}
	private boolean checkSquare(int dx, int dy, Grid g){
		int loc[] = getLoc();
		System.out.println("I'm checking");
		if((loc[0] + dx) < 14 && (loc[0] + dx )>-1 && (loc[1] + dy) < 10 && (loc[1] + dy) >-1){
		if(g.occupiedSquares[loc[0]+dx][loc[1]+dy] == false){
			System.out.print("I see that nobody's at " + (loc[0]+dx) + " " + (loc[1]+dy)+ " ");
			if(g.intGrid[loc[0]+dx][loc[1]+dy] == 3){
				System.out.println(" and it's a path! lets go there. ");
				return true;
			}
		}
		}
			
		
		return false;
		
	}
	public BufferedImage getPicture(){
		return directionImages[direction];
		
	}
	
}
