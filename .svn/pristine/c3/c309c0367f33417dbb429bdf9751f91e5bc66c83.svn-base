import java.util.ArrayList;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class Grid extends JPanel implements ActionListener, MouseListener {
	public int numButterflies;
	public int numAnimals; //number of Animals on the grid.
	public int topMargin = 135; //128 is minimum here because of menu size
	public int leftMargin = 8; //empty space between grid & screen
	public int menutopMargin = 0;
	public int menuleftMargin = 50;
	public int numTilesX = 14; //number of columns
	public int numTilesY = 10; //number of rows
	public Grid_Type background[][] = new Grid_Type[numTilesX][numTilesY]; //for the time being hard coded to 14 by 10
	public boolean occupiedSquares[][] = new boolean[numTilesX][numTilesY];
	public ArrayList<Drawable> foreground = new ArrayList<Drawable>(25); //contains all plants and waters

	private int[] runoff_Tolerance; //0 north, 1 east, 2 south, 3 west
	private int score = 100; //number of waters that can reach drains before you lose- changing from 100 will break water meter animation
	public int grid_Height; //not sure if used, may be same as numTilesX/Y
	public int grid_Width;
	public growThread grower; 
	int toolUsed = 0; //used by the overlay on tools
	boolean starting = true; //true when splash screen is shown, false during play or ending
	boolean ending = false; //true when final screen is shown, false during play or intro
	int invasiveRate = 5; //5 means grid tiles grow 5 times for each invasive that spawns, used in grow tile function
	int waterSpawnRate = 6; //see above comment, same deal
	int waterMoveRate = 10; //and again
	private BufferedImage waterMeterHeader; 
	private BufferedImage waterMeterEmpty; // these are self explanatory
	private BufferedImage waterMeterFull;
	private BufferedImage noLayover;
	private BufferedImage Layover;
	private BufferedImage scoreShower;
	private BufferedImage womanOnRight;
	private BufferedImage house;
	private BufferedImage startScreen;
	private BufferedImage endScreen;
	int cycles = 0;

	//These are columns for the default grid
	//could make different ones for different difficulties, not hard to do.
	public int[][] intGrid = {{0,0,0,5,0,0,0,0,0,0},{0,0,0,6,3,3,6,0,0,0},{0,0,0,0,0,0,5,0,0,0},{0,0,0,0,6,3,6,0,0,0},{0,0,0,0,5,0,0,0,0,0},{0,0,0,4,4,4,4,0,0,0},{0,6,3,4,4,4,4,0,0,0},{0,5,0,4,4,4,4,3,6,0},{0,5,0,4,4,4,4,0,5,0},{3,6,0,0,0,5,0,0,5,0},{0,0,0,0,0,6,3,0,5,0},{0,0,0,0,0,0,5,0,5,0},{0,0,0,6,3,3,6,0,6,3},{0,0,0,5,0,0,0,0,0,0}};
	
	public Menu menu = new Menu(); //menu class populates a set of tools
	
	public void change_Score(int c){ //used to decrement score when waters reach drains
		score += c;
	}	

	public int getNumAnimals(){
		return numAnimals;
	}
	public int getNumButterflies(){
		return numButterflies;
	}
	
	public int getWaterSpawnRate(){
		return waterSpawnRate;
	}
	public int getWaterMoveRate(){
		return waterMoveRate;
	}
	public int getCycles(){
		return cycles;
	}
	
	public boolean checkStarting(){
		return starting;
	}
	public boolean checkEnding(){
		return ending;
	}
	
	public int getNumTilesX(){
		return numTilesX;
	}
	
	public int getNumTilesY(){
		return numTilesY;
	}
	
	public int[][] getIntGrid(){
		return intGrid;
	}
	
	public boolean[][] getOccupiedSquares(){
		return occupiedSquares;
	}
	
	
	public class growThread extends Thread {
		//determines which grid_Tile grows, and when.
	
		public void run (){
		Random r = new Random();
			int x =  r.nextInt(10); //get a random x tile
			int y = r.nextInt(14); //get a random y tile
			//make a method for getting a new location? seems that this block
			//will be used frequently.
		//	 background[y][x].getClass()
			System.out.println("<"+ x + ", "+ y+ ">");
		}
	}
	
	
	public int get_Score(){ //used to show water meter correctly
		return score;
	}
	
	public void paint(Graphics g){
		if(starting) //does this only at start of game
			g.drawImage(startScreen,100,200,this);
		
		if(ending) //does this only at the end of game
			g.drawImage(endScreen,100,200,this);
		
		if(!starting && !ending){
		//drawing grid background
			draw_Background(g);
	    
		//drawing menu
			draw_selection_Layover(g);
			draw_Menu(g);

		//drawing water meter
			draw_Water_Level(g);
		//drawing house picture in middle
			g.drawImage(house, 330, 330, this);
			
		//drawing grid foreground
			draw_Foreground(g);
	
		}
		
	}
	
	public void draw_Background(Graphics g){
		for(int i = 0; i < numTilesX; i++){ //iterates over all tiles and grabs the right object's picture from background array
			for(int j = 0; j < numTilesY; j++){
				g.drawImage(background[i][j].getTile(), i * 64 + leftMargin, j * 64 + topMargin,  this); 
			}
		}
	}
	
	public void draw_Menu(Graphics g){
		for(int i = 0; i < menu.getNumTools(); i++){ //iterates over menu and draws all five in right spot
			g.drawImage(menu.getToolBox()[i].getIcon(), i * 128 + menuleftMargin, menutopMargin, this); 
		}
		//drawing woman on right	
		g.drawImage(womanOnRight, 916, menutopMargin, this);	
		
		//drawing bird and butterfly icon	
		g.drawImage(scoreShower, 750, menutopMargin, this);	
		
		//set dynamic count of number of birds and butterflies
		draw_AnimalCount(g);
	}
	
	//currently does change number of animals but repaints over previous count
	//still working on this issue
	public void draw_AnimalCount(Graphics g){
		g.setFont(new Font("Arial", Font.BOLD, 30));	
		
		//for some reason the string kept writing over itself, so this was the only
		//way I could think of to fix that bug, I tried using repaint but that didnt solve it
		g.setColor(Color.gray);
		g.fillRect(850, 0, 55, 125);
		
		//draws Strings of current number of animals and butterflies
		g.setColor(Color.BLACK);
		g.drawString("" + numAnimals, 850, 45);
		g.drawString("" + numButterflies, 850, 95);	

	}
	
	public void draw_Foreground(Graphics g){
		int thisloc[] = new int[2]; //foreground objects know their own location and its pulled into here to be used
		int offsetLoc[] = new int[2]; //offset lets us shift it to the center of the square, foreground tiles are 52x52 while background are 64x64
		for(Drawable d: foreground){
			thisloc = d.getLoc();
			offsetLoc[0] = (thisloc[0]*64);
			offsetLoc[1] = (thisloc[1]*64);
			offsetLoc[0] += leftMargin+6;
			offsetLoc[1] += topMargin+6;
			//System.out.println("Drawing to foreground at  " + (thisloc[1]*64));
			//g.drawImage(temp,offsetLoc[0],offsetLoc[1],this);
			g.drawImage(d.getPicture(),offsetLoc[0],offsetLoc[1],this);
		}
		
	}
	
	//method used for menu bar to highlight a tool when it is selected
	public void draw_selection_Layover(Graphics g){
		for(int i = 0; i < 5; i++){ //uses tool used to show the yellow border behind active tool and gray behind all others
			if(toolUsed == i)		
				g.drawImage(Layover, 50+(128*i), menutopMargin, this); 
			else				
				g.drawImage(noLayover, 50+(128*i), menutopMargin, this);

		}
	}
	
	public void removeFromForeground(int x, int y){
		int thisloc[] = new int[2]; //as with above function, drawables know own loc so this pulls it in
		Drawable killThis = null; //if it doesnt find the one it wants it wont try to remove any
		for(Drawable a: foreground){ 
			thisloc = a.getLoc(); //pull location in
			if(thisloc[0] == x && thisloc[1] == y) //if it's the one you want to kill as per given parameters
				killThis = a; //then mark it as the one you want to remove but wait til after iterating over all of them to do so
		}
		if(killThis != null){
			occupiedSquares[x][y] = false; //on occupied squares array it marks that nothing is there
			foreground.remove(killThis);} //removes the object from foreground arraylist here
	}
	
	public void animate_Gutters(Graphics g){
		//not done now, waters do splash animation themselves. Ideally we'll see gutters that get unhappy/spilling water when waters get to them.
	}
	
	
	public void draw_Water_Level(Graphics g){
		//drawing water meter on right
		
		//The meter is based on 33 14 pixel high rows below a 50 pixel header, adding to 512 pixels tall, all are 256 pixels wide.
		
		int  numEmpty = (int) score/3; //see above comment that explains these numbers
		int  numFull = 33- numEmpty; 
		
		g.drawImage(waterMeterHeader, 916, menutopMargin+270, this); //draw header
		
		for(int i = 0; i < numEmpty; i++){ //draw empties below header, each below previous
			
				g.drawImage(waterMeterEmpty, 916, menutopMargin+320+(i*14), this);
			
		}
		for(int i = 0; i < numFull; i++){ //draw blue ones below empties, each below previous
				g.drawImage(waterMeterFull, 916, menutopMargin+320+(numEmpty *14) +(14*i), this);
			
		
		}
	}
	
	//adds animal count for scarlet oak and spicebush plants
	public void addAnimal(){
		for(Drawable a: foreground){
			if(a.getName().equals("Spicebush") || a.getName().equals("Scarlet Oak"))
				numAnimals ++;
		}
	}
	
	//adds butterfly count for butterfly weed and spicebush plants
	public void addButterfly(){
		for(Drawable a: foreground){
			if(a.getName().equals("Spicebush") || a.getName().equals("Butterfly Weed"))
				numButterflies ++;
		}
	}
	
	public void addPlant(int type, int x, int y){ //types 0-7 accepted where 0,1,2,3 are native and 4,5,6,7 are invasive. any other vals will just say you cant do that in console.
		if(intGrid[x][y] <3 && x < 14 && y < 10 && occupiedSquares[x][y]!=true){ //makes sure that the square is in bounds, it's not a path or roof, and that it's not occupied
		switch (type){
		case 0:
			foreground.add(new ChristmasFern(x,y)); //all of these just add a new object of a specific subclass at the location
			break;
		case 1:
			foreground.add(new ButterflyWeed(x,y));
			break;
		case 2:
			foreground.add(new ScarletOak(x,y));
			break;
		case 3:
			foreground.add(new Spicebush(x,y));
			break;
		case 4:
			foreground.add(new NorwayMaple(x,y));
			break;
		case 5:
			foreground.add(new MaidenGrass(x,y));
			break;
		case 6:
			foreground.add(new ButterflyBush(x,y));
			break;
		case 7:
			foreground.add(new JapaneseBarberry(x,y));
			break;
		default:
			System.out.println("Only types 0 thru 7 accepted");
			break;
		}
		occupiedSquares[x][y] = true; //marks this square as occupied.
		}
		else{
		//	System.out.println("Not a plantable square, is occupied or out of bounds");
		}
			
	}
	
	
	public void addWater(int pathNum){ //this could be better named as spawn new water- it spawns a water on the roof at one of four squares at start of paths.
		switch(pathNum){
		case(0): 
			if(occupiedSquares[9][5] == false) //see if theres one right ahead of it
				foreground.add(new Water(0,8,5)); //east path
		break;
		case(1):
			if(occupiedSquares[7][7] == false) //south path
				foreground.add(new Water(1,7,6));
		break;
		case(2):
			if(occupiedSquares[4][4] == false) //west path
				foreground.add(new Water(2,5,4));
		break;
		case(3):
			if(occupiedSquares[6][2] == false) //north path
				foreground.add(new Water(3,6,3));
		break;
		default:
			break;
		
		}
	}
	
	//index of runoff_Tolerance
	public void decrement_Gutter(int gutter){ //not used probably, score is being used as runoff tolerance and theres a method at the top that does this for that.
		runoff_Tolerance[gutter]--;
	}
	public void setTool(int t){ //used to say which tool needs overlay
		toolUsed = t;
	}
	public void updateGrid(){ //just makes sure that the this is right
		this.repaint();
	}
	public void setOccupiedSquares(boolean tf, int x, int y){
		occupiedSquares[x][y] = tf;
	}
	public void grow_tile(int x, int y){ 
		//change tile takes in the x,y position from the grid on screen
		//and determines which background [i][j] tile was selected.
		//then changes that tile to plantA
		Random r = new Random();
		cycles ++;
		
		//if(r.nextInt(invasiveRate) == 0) //spawns invasives randomly when tiles are grown
		if(cycles % invasiveRate == 0) //instead of random
			this.addPlant(r.nextInt(4)+4,r.nextInt(14),r.nextInt(10));
		//right now with the +4 on the next line it only spawns invasives, without it it would spawn natives and invasives.
		//invasives are set to spawn at 1/5 the rate that tiles grow
		
		
		switch(intGrid[x][y]){
		case 0 : //0 being grass, change it to meadow (1)
			background[x][y] = new Meadow_Tile(); 
			intGrid[x][y] = 1;
			break;
		case 1: //1 is meadow, grow it to forest(2)
			background[x][y] = new Forest_Tile();
			intGrid[x][y] = 2;
			break;	
		default: //anything else is either forest already or something that cant grow
			//System.out.println("This doesn't grow");
			break;
		}
	}
	
	public void mow_tile(int x,int y){
		if(x>= 0 && x<14 && y>= 0 && y<10){
			if(intGrid[x][y] <3){ //if it's grass meadow or forest not path or roof,
				background[x][y] = new Grass_Tile(); //add a grass there
				intGrid[x][y] = 0; //mark that location on intgrid as being grass
				removeFromForeground(x,y); //remove any objects that are already there
			}
			else{
				//System.out.println("Can't mow here");
			}
		}
	}
	
	//remove water from path if there is a plant nearby
	public void removeWater(){
		ArrayList<Drawable> killedWaters = new ArrayList<Drawable>(20);
		int thisIndex;
		for(Drawable d: foreground){ //for all of the drawable objects
			thisIndex = d.absorb(this);
				if(thisIndex!=9999 && thisIndex != 0) 
					killedWaters.add(foreground.get(thisIndex));	//instead of removing it here flag it to remove it later
		}
		if(killedWaters.size() > 0){ //doing it this way fixes the concurrent modification error
			for(Drawable d: killedWaters){ //for all flagged waters
				foreground.remove(d);	 
			}
		}
		killedWaters.clear(); //clear out indexes of removed ones
				
	}
		
		
	public void moveAllWaters(){
		
		ArrayList<Drawable> killedWaters = new ArrayList<Drawable>(20);
		int thisIndex;
		for(Drawable d: foreground){ //for all of the drawable objects
			thisIndex = d.move(this); //try to make it move- only waters can actually move but all have the method, others do nothing- also note that it returns an int
			if(thisIndex!=9999)//it will return 9999 from all plants and living waters
				killedWaters.add(foreground.get(thisIndex));	//instead of removing it here flag it to remove it later
		}
		if(killedWaters.size() > 0){ //doing it this way fixes the concurrent modification error
			for(Drawable d: killedWaters){ //for all flagged waters
				foreground.remove(d);	 
			}
		}
		killedWaters.clear(); //clear out indexes of removed ones
	}
	
	public Grid(){
			//JFrame grid = new JFrame(); 
			//want to randomize for initial tiles, rather than
			// rows of grass or meadow
			grower = new growThread();
			
			try{
				waterMeterHeader = ImageIO.read(new File("img/Images/water_meter_header.png")); //we load all of these pictures only one time in the game's runtime
				waterMeterEmpty = ImageIO.read(new File("img/Images/water_meter_empty.png"));
				waterMeterFull = ImageIO.read(new File("img/Images/water_meter_full.png"));
				noLayover = ImageIO.read(new File("img/Images/noLayover.png"));
				Layover = ImageIO.read(new File("img/Images/selectLayover.png"));
				scoreShower = ImageIO.read(new File("img/Images/Placeholders/scoreShower.png"));
				house = ImageIO.read(new File("img/Images/Placeholders/housepicture.png"));
				//womanOnRight = ImageIO.read(new File("img/Images/guyonright.png")); //my awesome hand drawn version that will offend artists sensibilities, disabled for thursday
				womanOnRight = ImageIO.read(new File("img/Images/guyonrightB.png"));
				startScreen = ImageIO.read(new File("img/Images/splash.png"));
				endScreen = ImageIO.read(new File("img/Images/failscreen.png"));
			} 
			catch (IOException e) {
				e.printStackTrace();
			}
			
			//setting up grid from default hard coded way at the top, note that those are columns
			for(int i = 0; i<numTilesX; i++){
				for(int j= 0; j<numTilesY; j++){
					//System.out.println("Made it to " + i + " " + j + "  " + intGrid[i][j]);
				
					switch(intGrid[i][j]){
						case 0 : //self explanitory what these do but note the case numbers, they match up to code in intgrid
							background[i][j] = new Grass_Tile();
							break;
						case 1:
							background[i][j] = new Meadow_Tile();
							break;	
						case 2:
							background[i][j] = new Forest_Tile();
							break;
						case 3:
							background[i][j] = new Queue_Of_Care(0); //vertical tile
							break;
						case 4:
							background[i][j] = new Roof_Tile();
							break;
						case 5:
							background[i][j] = new Queue_Of_Care(1); //horizontal tile
							break;
						case 6:
							background[i][j] = new Queue_Of_Care(2); //corner tile (omnidirectional) -- also remember if you add more tiles here to go into water's check square and allow them as options
							break;
						default:
							background[i][j] = new Grass_Tile();
							break;
					}

				}
			}
 	
	}
	
	//ends start screen
	public void goPastStartScreen(){ 
		starting = false;
	}
	//goes to end game screen
	public void goToEndScreen(){
		ending = true;
	}


	//MOUSE LISTENER METHODS
	public void mouseDragged(MouseEvent e) {

	}

	public void mouseMoved(MouseEvent e) {
		
		
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {

	}

	@Override
	public void mouseEntered(MouseEvent arg0) {

		
	}

	@Override
	public void mouseExited(MouseEvent arg0) {

	
	}

	@Override
	public void mousePressed(MouseEvent arg0) {

		
	}

	@Override
	public void mouseReleased(MouseEvent arg0) {

		
	}

}
